{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = '0733a9a36ed76b4d2bc109a42a04b414';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n//get weather data from API\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + '/' + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\n\n//format current weather\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\n\n//format Forecast Weather\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    daily,\n    hourly,\n    timezone\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData('weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData('onecall', {\n    lat,\n    lon,\n    exclude: 'current, minutely, alerts',\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return {\n    ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formatToLocalTime = function (secs, zone) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";\n  return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n};\nconst iconUrlFromCode = code => `https://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formatToLocalTime","day","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","exclude","units","secs","zone","format","arguments","length","undefined","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["C:/Users/Dell/OneDrive/Documents/react-weather-app/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\r\n\r\nconst API_KEY = '0733a9a36ed76b4d2bc109a42a04b414';\r\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\r\n\r\n//get weather data from API\r\nconst getWeatherData = (infoType, searchParams) =>{\r\n    const url = new URL(BASE_URL + '/' + infoType);\r\n    url.search = new URLSearchParams({...searchParams, appid:API_KEY});\r\n\r\n    return fetch(url).then((res) => res.json())\r\n};\r\n\r\n//format current weather\r\nconst formatCurrentWeather = (data) =>{\r\n    const {\r\n        coord: {lat, lon},\r\n        main: {temp, feels_like, temp_min, temp_max, humidity},\r\n        name,\r\n        dt,\r\n        sys:{country, sunrise, sunset},\r\n        weather,\r\n        wind:{speed}\r\n    } = data;\r\n\r\n    const {main: details, icon} = weather[0]\r\n\r\n    return {lat, lon, temp, feels_like, temp_min, temp_max, humidity, name, dt,country, sunrise,\r\n         sunset, details, icon, speed}\r\n};\r\n\r\n//format Forecast Weather\r\nconst formatForecastWeather = (data) =>{\r\n    let {timezone, daily, hourly} = data;\r\n    daily = daily.slice(1,6).map(d=>{\r\n        return{\r\n            title: formatToLocalTime(d.dt, timezone, 'ccc'),\r\n            temp: d.temp.day,\r\n            icon: d.weather[0].icon\r\n        }\r\n    });\r\n\r\n    hourly = hourly.slice(1,6).map(d=>{\r\n        return{\r\n            title: formatToLocalTime(d.dt, timezone, 'hh:mm a'),\r\n            temp: d.temp,\r\n            icon: d.weather[0].icon\r\n        }\r\n    });\r\n\r\n    return {daily,hourly,timezone};\r\n}\r\n\r\n\r\nconst getFormattedWeatherData = async (searchParams) => {\r\n    const formattedCurrentWeather = await getWeatherData('weather',searchParams)\r\n    .then(formatCurrentWeather)\r\n\r\n    const {lat,lon} = formattedCurrentWeather\r\n    const formattedForecastWeather = await getWeatherData('onecall',{\r\n        lat, lon, exclude: 'current, minutely, alerts', units: searchParams.units\r\n    }).then(formatForecastWeather)\r\n\r\n    return {...formattedCurrentWeather, ...formattedForecastWeather};\r\n};\r\n\r\nconst formatToLocalTime = (secs,zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") =>\r\nDateTime.fromSeconds(secs).setZone(zone).toFormat(format);\r\n\r\nconst iconUrlFromCode = (code) => `https://openweathermap.org/img/wn/${code}@2x.png`\r\n\r\nexport default getFormattedWeatherData;\r\nexport {formatToLocalTime, iconUrlFromCode};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}